/*
 * ICS4U Summative
 * Course Planner
 * Agenda
 */
package CourseAgenda;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sara
 */
public class AgendaForm extends javax.swing.JPanel {

    /**
     * Creates new form AgendaForm
     */
    public AgendaForm(Agenda Agenda) {
        initComponents();
        myAgenda = Agenda;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AgendaTitle = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        AgendaTable = new javax.swing.JTable();
        ImportTable = new javax.swing.JButton();
        ExportTable = new javax.swing.JButton();
        AddItem = new javax.swing.JButton();
        UpdateItem = new javax.swing.JButton();
        DeleteItem = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 255));

        AgendaTitle.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        AgendaTitle.setText("Agenda");

        AgendaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course", "Type", "Date", "Grade"
            }
        ));
        ScrollPane.setViewportView(AgendaTable);

        ImportTable.setText("Import Table");
        ImportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportTableActionPerformed(evt);
            }
        });

        ExportTable.setText("Export Table");
        ExportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportTableActionPerformed(evt);
            }
        });

        AddItem.setText("Add Item");
        AddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemActionPerformed(evt);
            }
        });

        UpdateItem.setText("Update Item");
        UpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateItemActionPerformed(evt);
            }
        });

        DeleteItem.setText("Delete Item");
        DeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(AgendaTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ImportTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ExportTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AgendaTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(ImportTable)
                        .addGap(18, 18, 18)
                        .addComponent(ExportTable)
                        .addGap(87, 87, 87)
                        .addComponent(AddItem)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateItem)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteItem))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ImportTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportTableActionPerformed
        Agenda agenda = new Agenda();
        agenda.AgendaImport();
    }//GEN-LAST:event_ImportTableActionPerformed

    private void ExportTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportTableActionPerformed
        Agenda agenda = new Agenda();
        agenda.AgendaExport();
    }//GEN-LAST:event_ExportTableActionPerformed

    private void AddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemActionPerformed
        String agendaCourse = JOptionPane.showInputDialog("Enter the course");
        String agendaType = JOptionPane.showInputDialog("Enter the type of assessment due");
        String agendaDate = JOptionPane.showInputDialog("Enter the due date");
        String agendaGrade = JOptionPane.showInputDialog("Enter the grade if recieved");

        myAgenda.AgendaAdd(agendaCourse, agendaType, agendaDate, agendaGrade);
        
        DisplayAgenda();
        
        //AgendaTable = agenda.AgendaAdd();
       //(DefaultTableModel)AgendaTable.getModel() = agenda.AgendaAdd();
        
    }//GEN-LAST:event_AddItemActionPerformed

    private void DisplayAgenda() {
        AgendaItem myAgendaItem;
        
        DefaultTableModel table = (DefaultTableModel)AgendaTable.getModel();
        table.setRowCount(0);

        for (int i = 0; i < myAgenda.AgendaItems(); i++) {
            myAgendaItem = myAgenda.AgendaGet(i);
            
             Object agendaItem[] = new Object[4];
            agendaItem[0] = myAgendaItem.AgendaCourse;
            agendaItem[1] = myAgendaItem.AgendaType;
            agendaItem[2] = myAgendaItem.AgendaDate;
            agendaItem[3] = myAgendaItem.AgendaGrade;
        
            table.addRow(agendaItem);
        }
    }
    
    private void UpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateItemActionPerformed
        
        DefaultTableModel table = (DefaultTableModel)AgendaTable.getModel();
        int selectedRow = AgendaTable.getSelectedRow();
        int selectedCol = AgendaTable.getSelectedColumn();
        String message = null;
        
        // replace data in selected table cell if any changes are made
        try {
            AgendaItem AgendaItem = new AgendaItem();
            AgendaItem.AgendaCourse = table.getValueAt(selectedRow, 0).toString();
            AgendaItem.AgendaType = table.getValueAt(selectedRow, 1).toString();
            AgendaItem.AgendaDate = table.getValueAt(selectedRow, 2).toString();
            AgendaItem.AgendaGrade = table.getValueAt(selectedRow, 3).toString();
            
            String agendaItem = table.getValueAt(selectedRow, selectedCol).toString();
            switch (selectedCol) {
                case 0:
                    message = "Enter any changes to the course";
                    break;
                case 1:
                    message = "Enter any changes to the type of assessment due";
                    break;
                case 2:
                    message = "Enter any changes to the date";
                    break;
                case 3:
                    message = "Enter any changes to the grade";
                    break;
                default:
                    break;
            }
                    
            agendaItem = JOptionPane.showInputDialog(null, message, agendaItem);

            switch (selectedCol) {
                case 0:
                    AgendaItem.AgendaCourse = agendaItem;
                    break;
                case 1:
                    AgendaItem.AgendaType = agendaItem;
                    break;
                case 2:
                    AgendaItem.AgendaDate = agendaItem;
                    break;
                case 3:
                    AgendaItem.AgendaGrade = agendaItem;
                    break;
                default:
                    break;
            }
            table.setValueAt(agendaItem, selectedRow, selectedCol);
            myAgenda.AgendaUpdate(selectedRow, AgendaItem.AgendaCourse, AgendaItem.AgendaType, AgendaItem.AgendaDate, AgendaItem.AgendaGrade);
            DisplayAgenda();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No cell selected");
        } 
        
    }//GEN-LAST:event_UpdateItemActionPerformed

    private void DeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteItemActionPerformed
        DefaultTableModel table = (DefaultTableModel) AgendaTable.getModel();
        
        // delete selected row
        try {
            int selectedRowIndex = AgendaTable.getSelectedRow();
            table.removeRow(selectedRowIndex);
            myAgenda.AgendaDelete(selectedRowIndex);
            DisplayAgenda();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No row selected");
        }
    }//GEN-LAST:event_DeleteItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItem;
    public javax.swing.JTable AgendaTable;
    private javax.swing.JLabel AgendaTitle;
    private javax.swing.JButton DeleteItem;
    private javax.swing.JButton ExportTable;
    private javax.swing.JButton ImportTable;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton UpdateItem;
    // End of variables declaration//GEN-END:variables

    private Agenda myAgenda;
    
    
}
